import os


def get_environment(ADDITIONAL_ENVIRONMENT=dict()):
    ENVIRONMENT = {
        "UUM_URL": os.getenv("UUM_URL"),
        "env_var2": "value 2",
        "MYSQL_HOST": os.getenv("MYSQL_HOST"),
        "MYSQL_PWD": os.getenv("MYSQL_PWD"),
        "MYSQL_USER": os.getenv("MYSQL_USER"),
        "MYSQL_API_DB": os.getenv("MYSQL_API_DB"),
        "MYSQL_APP_DB": os.getenv("MYSQL_APP_DB"),
        "SALT_KEY": os.getenv("SALT_KEY"),
        "GOOGLE_GEOCODE_URL": os.getenv("GOOGLE_GEOCODE_URL"),
        "KAFKA_BOOTSTRAP_SERVERS": os.getenv("KAFKA_BOOTSTRAP_SERVERS"),
        "KAFKA_SASL_MECHANISM": os.getenv("KAFKA_SASL_MECHANISM"),
        "KAFKA_SASL_PASSWORD": os.getenv("KAFKA_SASL_PASSWORD"),
        "KAFKA_SASL_USERNAME": os.getenv("KAFKA_SASL_USERNAME"),
        "KAFKA_SECURITY_PROTOCOL": os.getenv("KAFKA_SECURITY_PROTOCOL"),
        "MONGO_DB": os.getenv("MONGO_DB"),
        "MONGO_DB_COLLECTION": os.getenv("MONGO_DB_COLLECTION"),
        "MONGO_DB_PASSWORD": os.getenv("MONGO_DB_PASSWORD"),
        "MONGO_DB_USERNAME": os.getenv("MONGO_DB_USERNAME"),
        "MONGO_HOST": os.getenv("MONGO_HOST"),
        "ACCESS_KEY_ID": os.getenv("ACCESS_KEY_ID"),
        "AWS_REGION_NAME": os.getenv("AWS_REGION_NAME"),
        "SECRET_ACCESS_KEY": os.getenv("SECRET_ACCESS_KEY"),
        "TRIP_DB": os.getenv("TRIP_DB"),
        "HOT_CACHE_TIME_MINUTES_HOTEL": os.getenv("HOT_CACHE_TIME_MINUTES_HOTEL"),
        "WARM_CACHE_TIME_MINUTES_HOTEL": os.getenv("WARM_CACHE_TIME_MINUTES_HOTEL"),
        "GLOBAL_CONSO_CACHE_DB_NAME": os.getenv("GLOBAL_CONSO_CACHE_DB_NAME"),
        "GLOBAL_CACHE_HOTEL_COLLECTION_NAME": os.getenv("GLOBAL_CACHE_HOTEL_COLLECTION_NAME"),
        "GLOBAL_CACHE_FLIGHT_COLLECTION_NAME": os.getenv("GLOBAL_CACHE_FLIGHT_COLLECTION_NAME"),
        "VENDOR_REQUEST_COLLECTION": os.getenv("VENDOR_REQUEST_COLLECTION"),
        "CUSTOM_LOGGER_LOG_LEVEL": os.getenv("CUSTOM_LOGGER_LOG_LEVEL"),
        "CUSTOMLOGGER_LOGGER_OPENSEARCH_HOST": os.getenv("CUSTOMLOGGER_LOGGER_OPENSEARCH_HOST"),
        "CUSTOMLOGGER_LOGGER_OPENSEARCH_PASSWORD": os.getenv("CUSTOMLOGGER_LOGGER_OPENSEARCH_PASSWORD"),
        "CUSTOMLOGGER_OPENSEARCH_INDEXNAME": os.getenv("CUSTOMLOGGER_OPENSEARCH_INDEXNAME"),
        "OPENSEARCH_LOGGER_ENABLE": os.getenv("OPENSEARCH_LOGGER_ENABLE"),
        "CUSTOMLOGGER_OPENSEARCH_USERNAME": os.getenv("CUSTOMLOGGER_OPENSEARCH_USERNAME"),
        "AES_KEY": os.getenv("AES_KEY"),
        "CURRENCY_CONVERSION_COLLECTION": os.getenv("CURRENCY_CONVERSION_COLLECTION"),
        "USE_APP_SLAVE_DB": os.getenv("USE_APP_SLAVE_DB"),
        "MYSQL_HOST_APP_SLAVE": os.getenv("MYSQL_HOST_APP_SLAVE"),
        "MYSQL_USER_APP_SLAVE": os.getenv("MYSQL_USER_APP_SLAVE"),
        "MYSQL_PWD_APP_SLAVE": os.getenv("MYSQL_PWD_APP_SLAVE"),
        "MYSQL_APP_DB_SLAVE": os.getenv("MYSQL_APP_DB_SLAVE"),
        "USE_API_SLAVE_DB": os.getenv("USE_API_SLAVE_DB"),
        "MYSQL_HOST_API_SLAVE": os.getenv("MYSQL_HOST_API_SLAVE"),
        "MYSQL_USER_API_SLAVE": os.getenv("MYSQL_USER_API_SLAVE"),
        "MYSQL_PWD_API_SLAVE": os.getenv("MYSQL_PWD_API_SLAVE"),
        "MYSQL_API_DB_SLAVE": os.getenv("MYSQL_API_DB_SLAVE"),
        "HOTEL_REQUEST_DATE_FORMAT": os.getenv("HOTEL_REQUEST_DATE_FORMAT"),
        "STREAMING_BOT_NOTIFICATION_URI": os.getenv("STREAMING_BOT_NOTIFICATION_URI"),
        "GROUP_BOOKING_PAX_COUNT": os.getenv("GROUP_BOOKING_PAX_COUNT"),
        "NEW_RELIC_ACCOUNT_ID": os.getenv("NEW_RELIC_ACCOUNT_ID"),
        "NEW_RELIC_APP_NAME": os.getenv("NEW_RELIC_APP_NAME"),
        "NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS": os.getenv("NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS"),
        "NEW_RELIC_LAMBDA_EXTENSION_ENABLED": os.getenv("NEW_RELIC_LAMBDA_EXTENSION_ENABLED"),
        "NEW_RELIC_LAMBDA_HANDLER": os.getenv("NEW_RELIC_LAMBDA_HANDLER"),
        "NEW_RELIC_LICENSE_KEY": os.getenv("NEW_RELIC_LICENSE_KEY"),
        "KAFKA_APPLICATION_LOGS_TOPIC": os.getenv("KAFKA_APPLICATION_LOGS_TOPIC"),
        "ENVIRONMENT": os.getenv("ENVIRONMENT"),
        "LOGGING_STRATEGY": os.environ.get("LOGGING_STRATEGY"),
    }
    ENVIRONMENT.update(ADDITIONAL_ENVIRONMENT)

    return ENVIRONMENT
