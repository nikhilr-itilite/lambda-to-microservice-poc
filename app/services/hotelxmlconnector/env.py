import os


def get_environment(ADDITIONAL_ENVIRONMENT=dict()):
    ENVIRONMENT = {
        "ACCESS_KEY_ID": os.getenv("ACCESS_KEY_ID"),
        "AWS_REGION_NAME": os.getenv("AWS_REGION_NAME"),
        "SECRET_ACCESS_KEY": os.getenv("SECRET_ACCESS_KEY"),
        "FLIGHT_S3_BUCKET_NAME": os.getenv("FLIGHT_S3_BUCKET_NAME"),
        "KAFKA_SASL_MECHANISM": os.getenv("KAFKA_SASL_MECHANISM"),
        "KAFKA_SASL_PASSWORD": os.getenv("KAFKA_SASL_PASSWORD"),
        "KAFKA_SASL_USERNAME": os.getenv("KAFKA_SASL_USERNAME"),
        "KAFKA_SECURITY_PROTOCOL": os.getenv("KAFKA_SECURITY_PROTOCOL"),
        "KAFKA_FLIGHT_TRANSFORMATION_TOPIC": os.getenv("KAFKA_FLIGHT_TRANSFORMATION_TOPIC"),
        "KAFKA_BOOTSTRAP_SERVERS": os.getenv("KAFKA_BOOTSTRAP_SERVERS"),
        "FLIGHT_BATCH_SIZE": os.getenv("FLIGHT_BATCH_SIZE"),
        "FLIGHT_REQUEST_DATE_FORMAT": os.getenv("FLIGHT_REQUEST_DATE_FORMAT"),
        "MONGO_HOST": os.getenv("MONGO_HOST"),
        "MONGO_DB_USERNAME": os.getenv("MONGO_DB_USERNAME"),
        "MONGO_DB_PASSWORD": os.getenv("MONGO_DB_PASSWORD"),
        "TRIP_DB": os.getenv("TRIP_DB"),
        "HOTEL_REQUEST_DATE_FORMAT": os.getenv("HOTEL_REQUEST_DATE_FORMAT"),
        "HOTEL_RADIUS": os.getenv("HOTEL_RADIUS"),
        "HOTEL_S3_BUCKET_NAME": os.getenv("HOTEL_S3_BUCKET_NAME"),
        "KAFKA_HOTEL_DETAILS_TOPIC": os.getenv("KAFKA_HOTEL_DETAILS_TOPIC"),
        "LOGGER_OPENSEARCH_HOST": os.getenv("LOGGER_OPENSEARCH_HOST"),
        "LOGGER_OPENSEARCH_USERNAME": os.getenv("LOGGER_OPENSEARCH_USERNAME"),
        "LOGGER_OPENSEARCH_PASSWORD": os.getenv("LOGGER_OPENSEARCH_PASSWORD"),
        "LOGGER_OPENSEARCH_INDEX_NAME": os.getenv("LOGGER_OPENSEARCH_INDEX_NAME"),
        "LOGGER_OPENSEARCH_HOST_PORT": os.getenv("LOGGER_OPENSEARCH_HOST_PORT"),
        "LOGGER_OPENSEARCH_LOG_LEVEL": os.getenv("LOGGER_OPENSEARCH_LOG_LEVEL"),
        "LOGGER_OPENSEARCH_INDEX_ROTATE": os.getenv("LOGGER_OPENSEARCH_INDEX_ROTATE"),
        "STREAMING_BOT_NOTIFICATION_URI": os.getenv("STREAMING_BOT_NOTIFICATION_URI"),
        "AES_KEY": os.getenv("AES_KEY"),
        "MYSQL_API_DB_SLAVE": os.getenv("MYSQL_API_DB_SLAVE"),
        "MYSQL_HOST_API_SLAVE": os.getenv("MYSQL_HOST_API_SLAVE"),
        "MYSQL_PWD_API_SLAVE": os.getenv("MYSQL_PWD_API_SLAVE"),
        "MYSQL_USER_API_SLAVE": os.getenv("MYSQL_USER_API_SLAVE"),
        "MYSQL_HOST": os.getenv("MYSQL_HOST"),
        "MYSQL_PWD": os.getenv("MYSQL_PWD"),
        "MYSQL_USER": os.getenv("MYSQL_USER"),
        "MYSQL_APP_DB": os.getenv("MYSQL_APP_DB"),
        "MYSQL_API_DB": os.getenv("MYSQL_API_DB"),
        "HOTEL_ERROR_S3_BUCKET": os.getenv("HOTEL_ERROR_S3_BUCKET"),
        "STATIC_DATABASE": os.getenv("STATIC_DATABASE"),
        "HOTEL_CHAIN_MEMBERSHIP_DEAL_COLLECTION": os.getenv("HOTEL_CHAIN_MEMBERSHIP_DEAL_COLLECTION"),
        "NEW_RELIC_ACCOUNT_ID": os.getenv("NEW_RELIC_ACCOUNT_ID"),
        "NEW_RELIC_APP_NAME": os.getenv("NEW_RELIC_APP_NAME"),
        "NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS": os.getenv("NEW_RELIC_EXTENSION_SEND_FUNCTION_LOGS"),
        "NEW_RELIC_LAMBDA_EXTENSION_ENABLED": os.getenv("NEW_RELIC_LAMBDA_EXTENSION_ENABLED"),
        "NEW_RELIC_LAMBDA_HANDLER": os.getenv("NEW_RELIC_LAMBDA_HANDLER"),
        "NEW_RELIC_LICENSE_KEY": os.getenv("NEW_RELIC_LICENSE_KEY"),
        "TP_UAPI_VERSION": os.getenv("TP_UAPI_VERSION"),
        "TP_UAPI_WSDL_VERSION": os.getenv("TP_UAPI_WSDL_VERSION"),
        "KAFKA_APPLICATION_LOGS_TOPIC": os.getenv("KAFKA_APPLICATION_LOGS_TOPIC"),
        "ENVIRONMENT": os.getenv("ENVIRONMENT"),
        "LOGGING_STRATEGY": os.environ.get("LOGGING_STRATEGY"),
    }
    ENVIRONMENT.update(ADDITIONAL_ENVIRONMENT)

    return ENVIRONMENT
